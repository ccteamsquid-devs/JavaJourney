import java.util.Scanner;

public class JavaJourneyMain112818 { //v5

//Small bug fixes and quality of life changes!
//The clearing and its lovely flower!
//Inventory support for the flower!
//You can meet this game's only character - the Fairy Queen - at her mushroom home!
//New boolean - flower - for the Fairy Queen having the flower, but it's NYI
//Coming next: Sign on the river shore with instructions??? Implementing flower??? New boolean for flower unpicked in clearing??? Fairy Queen interactions?
//Barrier room and conclusion!

//JAVA JOURNEY BY CEE CEE KAPPLER
//Final Project - CIS163AA
//Fulfulls the following requirements:
//I: Basic Java language concepts: variables: int, char, boolean, and string
//II: Counter-controlled repetition
//III: Methods
//IV: Arrays
//VI: Class Scope

   public static void introduction(String[] plInventory, boolean doorOpen, int knobCounter, 
   boolean barrierOpen, boolean flower) { //This is one of many, many methods.
      
      String userInput;
      char userInput2; //local variable - Class Scope competency
   
      Scanner scnr = new Scanner(System.in);
      Scanner scnr2 = new Scanner(System.in);
      
      System.out.println("Type 'i' for instructions or 'b' to begin.");
      System.out.print("> ");
      userInput = scnr.nextLine();
   
      switch (userInput){
         case "i":
         case "instructions":
         case "I":
         case "INSTRUCTIONS":
            System.out.println("Instructions:");
            System.out.println("");
            System.out.println("l or look: shows the description of the room.");
            System.out.println("n or north, s or south, e or east, w or west: moves you through the game.");
            System.out.println("i or inventory: lists the items in your inventory");
            System.out.println("");
            System.out.println("take <item>: does exactly what it says");
            System.out.println("Some items can be examined (examine <item>) to determine their use.");
            System.out.println("Some items can be manipulated by opening or turning.");
            System.out.println("Other items can be given to someone: give <item> <target>");
            System.out.println("Use 'say' to talk to someone. No punctuation necessary!");
            System.out.println("");
            System.out.println("Type any letter and press enter when ready.");
            System.out.print("> ");
            userInput2 = scnr2.next().charAt(0);
            riverShoreDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
            break;
         case "b":
         case "begin":
         case "B":
            System.out.println("");
            System.out.println("");
            riverShoreDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
            break;
         default:
            System.out.println("Try again?");  //Example of recursion for error handling
            System.out.print("");
            introduction(plInventory, doorOpen, knobCounter, barrierOpen, flower);
            break;
         }
      }
      
      
      public static void riverShoreDesc(String[] plInventory, boolean doorOpen, int knobCounter, boolean barrierOpen, boolean flower){
      
         System.out.println("River Shore");
         System.out.println("");
         System.out.println("The waterfall you fell down - and managed to survive - thunders above you. Splashing you with cold droplets,");
         System.out.println("the mighty river to the south flows too fast to cross safely. To the north, the opening to a mysterious cave"); 
         System.out.println("yawns wide, and to the east, the wind whispers through the tall grass of a forest clearing.");
         System.out.println("");
         riverShore(plInventory, doorOpen, knobCounter, barrierOpen, flower);
      }
      
      public static void riverShore(String[] plInventory, boolean doorOpen, int knobCounter, boolean barrierOpen, boolean flower){
         String userInput2;
         int i = 0; //counter
         int j = 0; //second counter while I figure out a better way to do this
         Scanner scnr2 = new Scanner(System.in);
         
         System.out.print("> ");
         userInput2 = scnr2.nextLine();
         
         switch (userInput2){
            case "look":
            case "l":
            case "LOOK":
            case "Look":
            case "L":
               riverShoreDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
            case "south":
            case "South":
            case "s":
            case "S":
               if (plInventory[0] == "a wet piece of paper"){
                  System.out.println("You would drown if you tried to wade into the river.");
                  riverShore(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                  break;
               }
               else{
                  System.out.println("You would drown if you tried to wade into the river. There is a damp piece of paper stuck beneath a rock, though.");
                  riverShore(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                  break;
                  }
            case "east":
            case "East":
            case "e":
            case "E":
               if (plInventory[1] == "a beautiful flower"){
                  clearingAltDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               } else {
                  clearingDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                  }
               break;
            case "take paper":
            case "Take paper":
            case "TAKE PAPER":
               System.out.println("You take the paper.");
               plInventory[0] = "a wet piece of paper";
               riverShore(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
            case "read paper":
            case "Read paper":
            case "READ PAPER":
               System.out.println("There is nothing on this paper but the number 3.");
               riverShore(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
            case "look flower":
            case "examine flower":
            case "LOOK FLOWER":
            case "EXAMINE FLOWER":
            case "Look Flower":
            case "Examine Flower":
               if (plInventory[1] == "a beautiful flower"){
                  System.out.println("What a beautiful flower. It might make a lovely gift.");
                  } else {
                     System.out.println("You don't have a flower.");
                     }
               riverShore(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                  break;   
            case "north":
            case "n":
            case "North":
            case "N":
               if (doorOpen == true){
               caveAltDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               } else {
               caveDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               }
               break;
            case "inventory": // Counter-controlled Repetition
            case "Inventory":
            case "i":
            case "I":
               for (i = 0; i < plInventory.length; ++i){
                  if (plInventory[i] != null){   
                     System.out.print(plInventory[i] + " ");
                     System.out.println("");
                  }
                  else {
                     j = j + 1;
                  }
               }
               if (j >= 3) {
                  System.out.println("You have nothing in your inventory.");
                  j = 0;
               }
            
               riverShore(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                  break;
            default: 
               System.out.println("Try again?");
               riverShore(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
               
         }
      }
      
      public static void caveDesc(String[] plInventory, boolean doorOpen, int knobCounter, boolean barrierOpen, boolean flower){
      
         System.out.println("Strange Cave:");
         System.out.println("");
         System.out.println("This is a weird cave. It is obviously manmade due to the tool marks on the walls -"); 
         System.out.println("not to mention the fact that there are electric lights set into the walls, leaving no"); 
         System.out.println("shadows for small creatures to hide in. A large door with a knob in the center stands at the tunnel.");
         System.out.println("");
         
         cave(plInventory, doorOpen, knobCounter, barrierOpen, flower);
      }
      
      public static void caveAltDesc(String[] plInventory, boolean doorOpen, int knobCounter, boolean barrierOpen, boolean flower){
      
         System.out.println("Strange Cave:");
         System.out.println("");
         System.out.println("This is a weird cave. It is obviously manmade due to the tool marks on the walls - not"); 
         System.out.println("to mention the fact that there are electric lights set into the walls, leaving no shadows"); 
         System.out.println("for small creatures to hide in. A large door with a knob in the center stands at the tunnel. It is open.");
         System.out.println("");
         
         cave(plInventory, doorOpen, knobCounter, barrierOpen, flower);
      }

      
      public static void cave(String[] plInventory, boolean doorOpen, int knobCounter, boolean barrierOpen, boolean flower){
         String userInput2;
         int i = 0; //counter
         int j = 0; //another counter
      
         System.out.print("> ");
         Scanner scnr2 = new Scanner(System.in);
         userInput2 = scnr2.nextLine();
         
         switch (userInput2){
            case "look":
            case "l":
            case "Look":
            case "L":
               if (doorOpen == true){
                  caveAltDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                  } else {
                     caveDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                  }
               break;
            case "inventory":
            case "i":
            case "Inventory":
            case "INVENTORY":
            case "I":
                  for (i = 0; i < plInventory.length; ++i){
                  if (plInventory[i] != null){   
                     System.out.print(plInventory[i] + " ");
                     System.out.println("");
                  }
                  else {
                     j = j + 1;
                  }
               }
               if (j >= 3) {
                  System.out.println("You have nothing in your inventory.");
                  j = 0;
               }
               cave(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                  break; 
            case "n":
            case "north":
            case "North":
            case "NORTH":
            case "N":
               if (doorOpen == false){
                  System.out.println("The gigantic door stands in your way. Perhaps there is a way to open it.");
                  cave(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                  break;
               }
               else if (doorOpen == true){
                  barrierDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                  break;
               }
            case "read paper":
            case "Read paper":
            case "READ PAPER":
               if (plInventory[0] == "a wet piece of paper"){
                  System.out.println("There is nothing on this paper but the number 3.");
                  cave(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                  break;}
               else {
                  System.out.println("You don't have any paper.");
               }

            case "south":
            case "s":
            case "South":
            case "S":
            case "SOUTH":
               riverShoreDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
            case "open":
            case "open door":
            case "OPEN DOOR":
               System.out.println("You try pushing the door, but it won't budge.");
               cave(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
            case "turn knob":
            case "knob":
            case "TURN KNOB":
            case "KNOB":
            case "Turn Knob":
               if (doorOpen == true) {
                  System.out.println("The knob will not budge.");
                  }
               if ((doorOpen == false) && (knobCounter < 3)) {
                  System.out.println("Click.");
                  knobCounter = knobCounter + 1; // counter controlled repetition
               }
               if (knobCounter >= 3) {
                  doorOpen = true;
                  System.out.println("The huge door opens with an almost cartoonish creak.");
               }
               cave(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
            case "look flower":
            case "examine flower":
            case "LOOK FLOWER":
            case "EXAMINE FLOWER":
            case "Look Flower":
            case "Examine Flower":
               if (plInventory[1] == "a beautiful flower"){
                  System.out.println("What a beautiful flower. It might make a lovely gift.");
                  } else {
                     System.out.println("You don't have a flower.");
                     }
               cave(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                  break;
            
            default: 
               System.out.println("Try again?");
               cave(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;

            } //end case
      
      }
      
      public static void barrierDesc(String[] plInventory, boolean doorOpen, int knobCounter, boolean barrierOpen, boolean flower){
      
         System.out.println("Barrier Chamber:");
         System.out.println("");
         System.out.println("This was probably some kind of treasure room at one time. Unfortunately, it has been");
         System.out.println("stripped bare over the years - only a few rickety wooden tables and empty chests remain."); 
         System.out.println("Exits from the room lead north and south, but the north exit is covered by some kind of barrier that won't let you pass.");
         System.out.println("");
         
         barrier(plInventory, doorOpen, knobCounter, barrierOpen, flower);
      }
      
      public static void barrierAltDesc(String[] plInventory, boolean doorOpen, int knobCounter, boolean barrierOpen, boolean flower){
      
         System.out.println("Barrier Chamber:");
         System.out.println("");
         System.out.println("This was probably some kind of treasure room at one time. Unfortunately, it has been stripped");
         System.out.println("bare over the years - only a few rickety wooden tables and empty chests remain. Exits from the room lead north and south.");
         System.out.println("");
         
         barrier(plInventory, doorOpen, knobCounter, barrierOpen, flower);
      }

      public static void barrier(String[] plInventory, boolean doorOpen, int knobCounter, boolean barrierOpen, boolean flower){
         
         String userInput2;
         int i = 0; //counter
         int j = 0; //another counter
      
         System.out.print("> ");
         Scanner scnr2 = new Scanner(System.in);
         userInput2 = scnr2.nextLine();
         
         switch(userInput2){
            case "north":
            case "n":
            case "North":
               if (barrierOpen == false){
                  System.out.println("You can't pass through the barrier. It shocks you when you try. Ouch!");
               }
               else{
                  System.out.println("Inner chamber: NYI"); // FIXME
               }
               barrier(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
             case "south":
             case "s":
             case "South":
               cave(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
             case "open barrier":
             case "barrier":
             case "Open barrier":
             case "Open Barrier":
               if (barrierOpen == false){
                  System.out.println("You have no idea how to open the barrier.");
               }
               else{
               System.out.println("There is no barrier here.");
               }
               barrier(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
             case "l":
             case "look":
             case "LOOK":
             case "L":
             case "Look":
               if (barrierOpen == false){
               barrierDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               }
               else {
               barrierAltDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               }
               break;
            case "read paper":
            case "Read paper":
            case "READ PAPER":
               if (plInventory[0] == "a wet piece of paper"){
                  System.out.println("There is nothing on this paper but the number 3.");
                } else {
                  System.out.println("You don't have any paper.");
               }
               barrier(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                  break;
            case "look flower":
            case "examine flower":
            case "LOOK FLOWER":
            case "EXAMINE FLOWER":
            case "Look Flower":
            case "Examine Flower":
               if (plInventory[1] == "a beautiful flower"){
                  System.out.println("What a beautiful flower. It might make a lovely gift.");
                  } else {
                     System.out.println("You don't have a flower.");
                     }
               barrier(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                  break;

            case "inventory":
            case "i":
            case "Inventory":
            case "INVENTORY":
                  for (i = 0; i < plInventory.length; ++i){
                  if (plInventory[i] != null){   
                     System.out.print(plInventory[i] + " ");
                     System.out.println("");
                  }
                  else {
                     j = j + 1;
                  }
               }
               if (j >= 3) {
                  System.out.println("You have nothing in your inventory.");
                  j = 0;
               }
               barrier(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;    
             default:
               System.out.println("Try again?");
               barrier(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
               
         }
      }
      
      
      public static void clearingDesc(String[] plInventory, boolean doorOpen, int knobCounter, boolean barrierOpen, boolean flower){
      
         System.out.println("Clearing:");
         System.out.println("");
         System.out.println("The grass is bright green here, likely kept trimmed by wild grazing animals, none of which seem");
         System.out.println("to be making an appearance at the moment. Trees provide shade from the blazing sun, and beds of moss");
         System.out.println("would make a nice, soft place to rest. Through the trees, you can see a large mushroom to the north.");
         System.out.println("");
         System.out.println("A brilliant flower grows here, its petals red and yellow and yawning wide to the sun.");
         System.out.println("");
         clearing(plInventory, doorOpen, knobCounter, barrierOpen, flower);
         
      }
      
       public static void clearingAltDesc(String[] plInventory, boolean doorOpen, int knobCounter, boolean barrierOpen, boolean flower){
      
         System.out.println("Clearing:");
         System.out.println("");
         System.out.println("The grass is bright green here, likely kept trimmed by wild grazing animals, none of which seem");
         System.out.println("to be making an appearance at the moment. Trees provide shade from the blazing sun, and beds of moss");
         System.out.println("would make a nice, soft place to rest. Through the trees, you can see a large mushroom to the north.");
         System.out.println("");
         clearing(plInventory, doorOpen, knobCounter, barrierOpen, flower);
         
      }
      
       public static void clearing(String[] plInventory, boolean doorOpen, int knobCounter, boolean barrierOpen, boolean flower){
      
         String userInput2;
         int i = 0; //counter                    
         int j = 0; //another counter
      
         System.out.print("> ");
         Scanner scnr2 = new Scanner(System.in);
         userInput2 = scnr2.nextLine();
         
         switch (userInput2){
            case "take flower":
            case "pick flower":
            case "TAKE FLOWER":
            case "Take Flower":
            case "take brilliant":
            case "take brilliant flower":
            case "get flower":
            case "GET FLOWER":
            case "PICK FLOWER": //FIX ME - if the flower is not in the inventory and not on the ground, "You can't see any flower here."
               if (plInventory[1] == "a beautiful flower"){
                  System.out.println("You already have the flower.");
               } else {
                  plInventory[1] = "a beautiful flower";
                  System.out.println("You take the flower.");
                  }
               clearing(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
            case "inventory":
            case "i":
            case "Inventory":
            case "INVENTORY":
                  for (i = 0; i < plInventory.length; ++i){
                  if (plInventory[i] != null){   
                     System.out.print(plInventory[i] + " ");
                     System.out.println("");
                  }
                  else {
                     j = j + 1;
                  }
               }
               if (j >= 3) {
                  System.out.println("You have nothing in your inventory.");
                  j = 0;
               }
               clearing(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
             case "l":
             case "look":
             case "LOOK":
             case "L":
             case "Look": //fixme - if the flower is not in the inventory (fq has it) and not on the ground, go to clearingAltDesc
               if (plInventory[1] == "a beautiful flower"){
               clearingAltDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               }
               else {
               clearingDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               }
               break;
             case "mushroom":
             case "MUSHROOM":
             case "Mushroom":
             case "look mushroom":
             case "look Mushroom":
             case "LOOK MUSHROOM":
                 System.out.println("The mushroom is huge, but the trees prevent you from seeing it all. Going north will get you closer.");
                 clearing(plInventory, doorOpen, knobCounter, barrierOpen, flower);
                 break;
            case "read paper":
            case "Read paper":
            case "READ PAPER":
               if (plInventory[0] == "a wet piece of paper"){
                  System.out.println("There is nothing on this paper but the number 3.");
                } else {
                  System.out.println("You don't have any paper.");
               }
               clearing(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
            case "look flower":
            case "examine flower":
            case "LOOK FLOWER":
            case "EXAMINE FLOWER":
            case "Look Flower":
            case "Examine Flower": //FIXME: if statement to determine if the flower is in the inventory or is on the ground - new boolean???
               System.out.println("What a beautiful flower. It might make a lovely gift.");
               clearing(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
            case "n":
            case "north":
            case "North":
            case "NORTH":
               mushroomDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
            case "SOUTH":
            case "s":
            case "south":
            case "South":
               riverShoreDesc(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
            default:
               System.out.println("Try again?");
               clearing(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
         }
         
      }
      
      public static void mushroomDesc(String[] plInventory, boolean doorOpen, int knobCounter, boolean barrierOpen, boolean flower){
      
         System.out.println("Huge Mushroom:");
         System.out.println("");
         System.out.println("This isn't any ordinary mushroom - it stands about ten feet tall, and has been carved into a house -");
         System.out.println("complete with stained glass windows, painted wood shutters, and a small wooden door. On the porch sits");
         System.out.println("a fairy queen, who is knitting a sweater out of green lambswool. She pauses when you approach,");
         System.out.println("regarding you silently with brown eyes behind glittering spectacles."); 
         System.out.println("");
         System.out.println("An exit to the south leads out of the grove.");
         System.out.println("");
         
         mushroom(plInventory, doorOpen, knobCounter, barrierOpen, flower);
      }

      public static void mushroom(String[] plInventory, boolean doorOpen, int knobCounter, boolean barrierOpen, boolean flower){ // NYI
      
         String userInput2;
         int i = 0; //counter                    
         int j = 0; //another counter
      
         System.out.print("> ");
         Scanner scnr2 = new Scanner(System.in);
         userInput2 = scnr2.nextLine();
         
         switch (userInput2){
         
         default:
               System.out.println("Try again?");
               clearing(plInventory, doorOpen, knobCounter, barrierOpen, flower);
               break;
         }

      
      }
   
      public static void main(String[] args){     //global variables for Class Scope competency
                                                  //multiple types for Competency I - boolean, int, string, and character variables
      String userInput;
      String[] plInventory = new String[3]; //example of array - competency
      boolean doorOpen = false; //for the cave door
      int knobCounter = 0; //three clicks opens the door
      boolean barrierOpen = false; //for the barrier
      boolean flower = false; //does the Fairy Queen have the flower?
      
      System.out.println("Welcome to Java Journey!");
      System.out.println("");
      introduction(plInventory, doorOpen, knobCounter, barrierOpen, flower);
   }
}
